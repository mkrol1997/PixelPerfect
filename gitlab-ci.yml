stages:
  - unit_test
  - build_and_push


run_unit_tests:
  stage: unit_test
  
  image: python:3.9
  
  cache:
    paths:
      - .cache/pip
  
  before_script:
    - apt-get update && apt-get install ffmpeg libsm6 libxext6  -y
    - pip install -r pixel_perfect/requirements.txt
    - cd pixel_perfect
 
  script:
    - python manage.py makemigrations
    - python manage.py migrate
    - python manage.py test
  
  variables:
    DJANGO_CI_TESTS: 'True'
    GIT_LFS_SKIP_SMUDGE: "1"
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    SECRET_KEY: "${SECRET_KEY}"
    EMAIL: "${EMAIL}"
    EMAIL_PASSWORD: "${EMAIL_PASSWORD}"
    CLIENT_ID: "${CLIENT_ID}"
    PROJECT_ID: "${PROJECT_ID}"
    AUTH_URI: "${AUTH_URI}"
    TOKEN_URI: "${TOKEN_URI}"
    AUTH_PROVIDER_X509_CERT_URL: "${AUTH_PROVIDER_X509_CERT_URL}"
    CLIENT_SECRET: "${CLIENT_SECRET}"
    DB_NAME: "${DB_NAME}"
    DB_USER: "${DB_USER}"
    DB_PASSWORD: "${DB_PASSWORD}"
    DB_HOST: "${DB_HOST}"
    DB_PORT: "${DB_PORT}"


docker_build_nad_push:
  stage: build_and_push
 
  image: 
    name: docker:24.0.7
  
  services:
    - docker:dind

  cache:
    paths:
      - .cache/pip

  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
    - ECR_REGISTRY=$(echo "${ECR_REGISTRY}" | tr -d '\n')
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

  script:
    - cd pixel_perfect
    - docker-compose build --build-arg ECR_REGISTRY=$ECR_REGISTRY web
    - docker push $ECR_REGISTRY/pixel_perfect:latest
   
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    GIT_LFS_SKIP_SMUDGE: "1"
    AWS_REGION: "${AWS_REGION}"
    ECR_REGISTRY: "${ECR_REGISTRY}"
    AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
    AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"

  when: manual